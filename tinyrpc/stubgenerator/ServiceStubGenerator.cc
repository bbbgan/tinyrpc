#include <tinyrpc/stubgenerator/ServiceStubGenerator.h>

using namespace tinyrpc;

namespace {
// 最终生成代码
std::string serviceStubTemplate(const std::string& macroName,
                                const std::string& userClassName,
                                const std::string& stubClassName,
                                const std::string& serviceName,
                                const std::string& stubProcedureBindings,
                                const std::string& stubProcedureDefinitions) {
  std::string str =
      R"(
/*
 * This stub is generated by tinyrpc, DO NOT modify it!
 */
#ifndef TINYRPC_[macroName]_H_
#define TINYRPC_[macroName]_H_

#include <tinyrpc/server/RpcServer.h>
#include <tinyrpc/server/RpcService.h>
#include <tinyrpc/util.h>

class [userClassName];

namespace tinyrpc
{

template <typename S>
class [stubClassName]: noncopyable
{
protected:
    explicit
    [stubClassName](RpcServer& server)
    {
        static_assert(std::is_same_v<S, [userClassName]>,
                      "derived class name should be '[userClassName]'");

        auto service = new RpcService;

        [stubProcedureBindings]

        server.addService("[serviceName]", service);
    }

    ~[stubClassName]() = default;

private:
    [stubProcedureDefinitions]

private:
    S& convert()
    {
        return static_cast<S&>(*this);
    }
};

} // namespace tinyrpc

#endif // TINYRPC_[macroName]_H_
)";

  replaceAll(str, "[macroName]", macroName);
  replaceAll(str, "[userClassName]", userClassName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[serviceName]", serviceName);
  replaceAll(str, "[stubProcedureBindings]", stubProcedureBindings);
  replaceAll(str, "[stubProcedureDefinitions]", stubProcedureDefinitions);
  return str;
}

// 模板
std::string stubProcedureBindTemplate(const std::string& procedureName,
                                      const std::string& stubClassName,
                                      const std::string& stubProcedureName,
                                      const std::string& procedureParams) {
  std::string str =
      R"(
service->addProcedureReturn("[procedureName]", new ProcedureReturn(
        std::bind(&[stubClassName]::[stubProcedureName], this, _1, _2)
        [procedureParams]
));
)";

  replaceAll(str, "[procedureName]", procedureName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureParams]", procedureParams);
  return str;
}

std::string stubNotifyBindTemplate(const std::string& notifyName,
                                   const std::string& stubClassName,
                                   const std::string& stubNotifyName,
                                   const std::string& notifyParams) {
  std::string str =
      R"(
service->addProcedureNotify("[notifyName]", new ProcedureNotify(
        std::bind(&[stubClassName]::[stubNotifyName], this, _1)
        [notifyParams]
));
)";

  replaceAll(str, "[notifyName]", notifyName);
  replaceAll(str, "[stubClassName]", stubClassName);
  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyParams]", notifyParams);
  return str;
}

std::string stubProcedureDefineTemplate(const std::string& paramsFromJsonArray,
                                        const std::string& paramsFromJsonObject,
                                        const std::string& stubProcedureName,
                                        const std::string& procedureName,
                                        const std::string& procedureArgs) {
  std::string str =
      R"(void [stubProcedureName](Value& request, const RpcDoneCallback& done)
{
    auto& params = request["params"];

    if (params.IsArray()) {
        [paramsFromJsonArray]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
    else {
        [paramsFromJsonObject]
        convert().[procedureName]([procedureArgs] UserDoneCallback(request, done));
    }
})";

  replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
  replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureName]", procedureName);
  replaceAll(str, "[procedureArgs]", procedureArgs);
  return str;
}

std::string stubProcedureDefineTemplate(const std::string& stubProcedureName,
                                        const std::string& procedureName) {
  std::string str =
      R"(
void [stubProcedureName](Value& request, const RpcDoneCallback& done)
{
    convert().[procedureName](UserDoneCallback(request, done));
}
)";

  replaceAll(str, "[stubProcedureName]", stubProcedureName);
  replaceAll(str, "[procedureName]", procedureName);
  return str;
}
// 得到void类型的模板
std::string stubNotifyDefineTemplate(const std::string& paramsFromJsonArray,
                                     const std::string& paramsFromJsonObject,
                                     const std::string& stubNotifyName,
                                     const std::string& notifyName,
                                     const std::string& notifyArgs) {
  std::string str =
      R"(
void [stubNotifyName](Value& request)
{
    auto& params = request["params"];

    if (params.isArray()) {
        [paramsFromJsonArray]
        convert().[NotifyName]([notifyArgs]);
    }
    else {
        [paramsFromJsonObject]
        convert().[NotifyName]([notifyArgs]);
    }
}
)";

  replaceAll(str, "[notifyName]", notifyName);
  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyArgs]", notifyArgs);
  replaceAll(str, "[paramsFromJsonArray]", paramsFromJsonArray);
  replaceAll(str, "[paramsFromJsonObject]", paramsFromJsonObject);
  return str;
}

std::string stubNotifyDefineTemplate(const std::string& stubNotifyName,
                                     const std::string& notifyName) {
  std::string str =
      R"(
void [stubNotifyName](Value& request)
{
    convert().[notifyName]();
}
)";

  replaceAll(str, "[stubNotifyName]", stubNotifyName);
  replaceAll(str, "[notifyName]", notifyName);
  return str;
}

std::string argsDefineTemplate(const std::string& arg, const std::string& index,
                               JsonType type) {
  std::string str = R"(auto [arg] = params[[index]][method];)";
  std::string method = [=]() {
    switch (type) {
      case rapidjson::kFalseType:
        return ".GetBool()";
      case rapidjson::kTrueType:
        return ".GetBool()";
      case rapidjson::kNumberType:
        return ".GetDouble()";
      case rapidjson::kStringType:
        return ".GetString()";
      case rapidjson::kObjectType:
      case rapidjson::kArrayType:
        return ""; 
      default:
        fprintf(stderr, "%s\n", "bad type");
        return "";
    }
  }();
  replaceAll(str, "[arg]", arg);
  replaceAll(str, "[index]", index);
  replaceAll(str, "[method]", method);
  return str;
}

}  // namespace

// 生成代码！！！！
std::string ServiceStubGenerator::genStub() {
  auto macroName = genMacroName();  //获得宏的名字 ARITHMETICSERVICESTUB
  auto userClassName = genUserClassName(); // 获得用户类的名字 ArithmeticService
  auto stubClassName = genStubClassName(); // 获得stub类的名字 ArithmeticServiceStub
  auto& serviceName = serviceInfo_.name;  //服务名字  Arithmetic

  // cur
  auto bindings = genStubProcedureBindings(); // 生成所有的addProcedureReturn模板
  bindings.append(genStubNotifyBindings());  //生成bind， 并且加入到service服务
  auto definitions = genStubProcedureDefinitions();
  definitions.append(genStubNotifyDefinitions());
  // 返回生成的代码，代码汇总
  return serviceStubTemplate(macroName, userClassName, stubClassName,
                             serviceName, bindings, definitions);
}

std::string ServiceStubGenerator::genMacroName() {
  std::string result = serviceInfo_.name;
  for (char& c : result) c = static_cast<char>(toupper(c));
  return result.append("SERVICESTUB");
}

std::string ServiceStubGenerator::genUserClassName() {
  return serviceInfo_.name + "Service";
}

std::string ServiceStubGenerator::genStubClassName() {
  return serviceInfo_.name + "ServiceStub";
}

std::string ServiceStubGenerator::genStubProcedureBindings() {
  std::string result;
  for (auto& p : serviceInfo_.rpcReturn) {
    auto procedureName = p.name; // "Add"
    auto stubClassName = genStubClassName(); // ArithmeticServiceStub
    auto stubProcedureName = genStubGenericName(p); // AddStub
    auto procedureParams = genGenericParams(p); //  "lhs", rapidjson::kNumberType, "rhs", rapidjson::kNumberType

    auto binding = stubProcedureBindTemplate(
        procedureName, stubClassName, stubProcedureName, procedureParams);
    result.append(binding);
    result.append("\n");
  }
  return result;
}

// 得到子程序的定义  //void AddStub(Value& request, const RpcDoneCallback& done)

std::string ServiceStubGenerator::genStubProcedureDefinitions() {
  std::string result;
  for (auto& r : serviceInfo_.rpcReturn) {
    auto procedureName = r.name;
    auto stubProcedureName = genStubGenericName(r); // AddStub
    if (r.params.ObjectEmpty() == false) {
      auto paramsFromJsonArray = genParamsFromJsonArray(r);
// auto lhs = params[0].GetDouble();
// auto rhs = params[1].GetDouble();
      auto paramsFromJsonObject = genParamsFromJsonObject(r);
// auto lhs = params["lhs"].GetDouble();
// auto rhs = params["rhs"].GetDouble();
      auto procedureArgs = genGenericArgs(r); // lhs, rhs
      auto define = stubProcedureDefineTemplate(
          paramsFromJsonArray, paramsFromJsonObject, stubProcedureName,
          procedureName, procedureArgs);

      result.append(define);
      result.append("\n");
    } else {
      auto define =
          stubProcedureDefineTemplate(stubProcedureName, procedureName);

      result.append(define);
      result.append("\n");
    }
  }
  return result;
}

std::string ServiceStubGenerator::genStubNotifyBindings() {
  std::string result;
  for (auto& p : serviceInfo_.rpcNotify) {
    auto notifyName = p.name;
    auto stubClassName = genStubClassName();
    auto stubNotifyName = genStubGenericName(p);
    auto notifyParams = genGenericParams(p);

    auto binding = stubNotifyBindTemplate(notifyName, stubClassName,
                                          stubNotifyName, notifyParams);
    result.append(binding);
    result.append("\n");
  }
  return result;
}
// notify类型的定义 void SubStub(Value& request, const RpcDoneCallback& done)
std::string ServiceStubGenerator::genStubNotifyDefinitions() {
  std::string result;
  for (auto& r : serviceInfo_.rpcNotify) {
    auto notifyName = r.name;
    auto stubNotifyName = genStubGenericName(r);
    assert(r.params.IsArray());
    if (r.params.Size() > 0) {
      auto paramsFromJsonArray = genParamsFromJsonArray(r);
      auto paramsFromJsonObject = genParamsFromJsonObject(r);
      auto notifyArgs = genGenericArgs(r);
      auto define =
          stubNotifyDefineTemplate(paramsFromJsonArray, paramsFromJsonObject,
                                   stubNotifyName, notifyName, notifyArgs);

      result.append(define);
      result.append("\n");
    } else {
      auto define = stubNotifyDefineTemplate(stubNotifyName, notifyName);

      result.append(define);
      result.append("\n");
    }
  }
  return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genStubGenericName(const Rpc& r) {
  return r.name + "Stub";
}

// "lhs", rapidjson::kNumberType, "rhs", rapidjson::kNumberType
template <typename Rpc>
std::string ServiceStubGenerator::genGenericParams(const Rpc& r) {
  std::string result;

  for (auto& m : r.params.GetObject()) {
    std::string field = std::string("\"") + m.name.GetString() + std::string("\"");
    std::string type = [&]() {
      switch (m.value.GetType()) {
        case rapidjson::kFalseType:
          return "rapidjson::kFalseType";  // FIXME
        case rapidjson::kNumberType:
          return "rapidjson::kNumberType";
        case rapidjson::kStringType:
          return "rapidjson::kStringType";
        case rapidjson::kObjectType:
          return "rapidjson::kObjectType";
        case rapidjson::kArrayType:
          return "rapidjson::kArrayType";
        default:
          fprintf(stderr, "%s\n", "bad type");
          return "";
      };
    }();
    result.append(", \n").append(field);
    result.append(", ").append(type);
  }
  return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genGenericArgs(const Rpc& r) {
  std::string result;
  for (auto& m : r.params.GetObject()) {
    auto arg = m.name.GetString();
    result.append(arg);
    result.append(", ");
  }
  return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonArray(const Rpc& r) {
  std::string result;
  int index = 0;
  for (auto& m : r.params.GetObject()) {
    std::string line = argsDefineTemplate(
        m.name.GetString(), std::to_string(index), m.value.GetType());
    index++;
    result.append(line);
    result.append("\n");
  }
  return result;
}

template <typename Rpc>
std::string ServiceStubGenerator::genParamsFromJsonObject(const Rpc& r) {
  std::string result;
  for (auto& m : r.params.GetObject()) {
    std::string index = std::string("\"") + m.name.GetString() + std::string("\"");
    std::string line =
        argsDefineTemplate(m.name.GetString(), index, m.value.GetType());
    result.append(line);
    result.append("\n");
  }
  return result;
}