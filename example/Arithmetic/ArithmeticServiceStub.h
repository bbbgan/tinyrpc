
/*
 * This stub is generated by tinyrpc, DO NOT modify it!
 */
#ifndef TINYRPC_ARITHMETICSERVICESTUB_H_
#define TINYRPC_ARITHMETICSERVICESTUB_H_

#include <tinyrpc/server/RpcServer.h>
#include <tinyrpc/server/RpcService.h>
#include <tinyrpc/util.h>

class ArithmeticService;

namespace tinyrpc {

template <typename S>
class ArithmeticServiceStub : noncopyable {
 protected:
  explicit ArithmeticServiceStub(RpcServer& server) {
    static_assert(std::is_same_v<S, ArithmeticService>,
                  "derived class name should be 'ArithmeticService'");

    auto service = new RpcService;

    service->addProcedureReturn(
        "Add",
        new ProcedureReturn(
            std::bind(&ArithmeticServiceStub::AddStub, this, _1, _2), "lhs",
            rapidjson::kNumberType, "rhs", rapidjson::kNumberType));

    service->addProcedureReturn(
        "Sub",
        new ProcedureReturn(
            std::bind(&ArithmeticServiceStub::SubStub, this, _1, _2), "lhs",
            rapidjson::kNumberType, "rhs", rapidjson::kNumberType));

    service->addProcedureReturn(
        "Mul",
        new ProcedureReturn(
            std::bind(&ArithmeticServiceStub::MulStub, this, _1, _2), "lhs",
            rapidjson::kNumberType, "rhs", rapidjson::kNumberType));

    service->addProcedureReturn(
        "Div",
        new ProcedureReturn(
            std::bind(&ArithmeticServiceStub::DivStub, this, _1, _2), "lhs",
            rapidjson::kNumberType, "rhs", rapidjson::kNumberType));

    server.addService("Arithmetic", service);
  }

  ~ArithmeticServiceStub() = default;

 private:
  void AddStub(Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.IsArray()) {
      auto lhs = params[0].GetDouble();
      auto rhs = params[1].GetDouble();

      convert().Add(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].GetDouble();
      auto rhs = params["rhs"].GetDouble();

      convert().Add(lhs, rhs, UserDoneCallback(request, done));
    }
  }
  void SubStub(Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.IsArray()) {
      auto lhs = params[0].GetDouble();
      auto rhs = params[1].GetDouble();

      convert().Sub(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].GetDouble();
      auto rhs = params["rhs"].GetDouble();

      convert().Sub(lhs, rhs, UserDoneCallback(request, done));
    }
  }
  void MulStub(Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.IsArray()) {
      auto lhs = params[0].GetDouble();
      auto rhs = params[1].GetDouble();

      convert().Mul(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].GetDouble();
      auto rhs = params["rhs"].GetDouble();

      convert().Mul(lhs, rhs, UserDoneCallback(request, done));
    }
  }
  void DivStub(Value& request, const RpcDoneCallback& done) {
    auto& params = request["params"];

    if (params.IsArray()) {
      auto lhs = params[0].GetDouble();
      auto rhs = params[1].GetDouble();

      convert().Div(lhs, rhs, UserDoneCallback(request, done));
    } else {
      auto lhs = params["lhs"].GetDouble();
      auto rhs = params["rhs"].GetDouble();

      convert().Div(lhs, rhs, UserDoneCallback(request, done));
    }
  }

 private:
  S& convert() { return static_cast<S&>(*this); }
};

}  // namespace tinyrpc

#endif  // TINYRPC_ARITHMETICSERVICESTUB_H_
