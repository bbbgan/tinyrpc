
/*
 * This stub is generated by tinyrpc, DO NOT modify it!
 */

#ifndef TINYRPC_ARITHMETICCLIENTSTUB_H_
#define TINYRPC_ARITHMETICCLIENTSTUB_H_

#include <tinyrpc/client/BaseClient.h>
#include <tinyrpc/util.h>

namespace tinyrpc {

class ArithmeticClientStub : noncopyable {
 public:
  ArithmeticClientStub(EventLoop* loop, const InetAddress& serverAddress)
      : client_(loop, serverAddress) {
    client_.setConnectionCallback([this](const TcpConnectionPtr& conn) {
      if (conn->connected()) {
        LOG_INFO("connected");
        conn_ = conn;
        cb_(conn_);
      }
      else {
        LOG_INFO("disconnected");
        assert(conn_ != nullptr);
        cb_(conn_);
      }
    });
  }

  ~ArithmeticClientStub() = default;

  void start() { client_.start(); }

  void setConnectionCallback(const ConnectionCallback& cb) { cb_ = cb; }

  void Add(double lhs, double rhs, const ResponseCallback& cb) {
    Document request(rapidjson::kObjectType);
    Value jsonrpc;
    jsonrpc.SetString("2.0", request.GetAllocator());
    request.AddMember("jsonrpc", jsonrpc, request.GetAllocator());
    Value method;
    method.SetString("Arithmetic.Add", request.GetAllocator());
    request.AddMember("method", method, request.GetAllocator());

    Value params(rapidjson::kObjectType);

    params.AddMember("lhs", lhs, request.GetAllocator());

    params.AddMember("rhs", rhs, request.GetAllocator());

    request.AddMember("params", params, request.GetAllocator());

    assert(conn_ != nullptr);
    client_.sendCall(conn_, request, cb);
  }

  void Sub(double lhs, double rhs, const ResponseCallback& cb) {
    Document request(rapidjson::kObjectType);
    Value jsonrpc;
    jsonrpc.SetString("2.0", request.GetAllocator());
    request.AddMember("jsonrpc", jsonrpc, request.GetAllocator());
    Value method;
    method.SetString("Arithmetic.Sub", request.GetAllocator());
    request.AddMember("method", method, request.GetAllocator());

    Value params(rapidjson::kObjectType);

    params.AddMember("lhs", lhs, request.GetAllocator());

    params.AddMember("rhs", rhs, request.GetAllocator());

    request.AddMember("params", params, request.GetAllocator());

    assert(conn_ != nullptr);
    client_.sendCall(conn_, request, cb);
  }

  void Mul(double lhs, double rhs, const ResponseCallback& cb) {
    Document request(rapidjson::kObjectType);
    Value jsonrpc;
    jsonrpc.SetString("2.0", request.GetAllocator());
    request.AddMember("jsonrpc", jsonrpc, request.GetAllocator());
    Value method;
    method.SetString("Arithmetic.Mul", request.GetAllocator());
    request.AddMember("method", method, request.GetAllocator());

    Value params(rapidjson::kObjectType);

    params.AddMember("lhs", lhs, request.GetAllocator());

    params.AddMember("rhs", rhs, request.GetAllocator());

    request.AddMember("params", params, request.GetAllocator());

    assert(conn_ != nullptr);
    client_.sendCall(conn_, request, cb);
  }

  void Div(double lhs, double rhs, const ResponseCallback& cb) {
    Document request(rapidjson::kObjectType);
    Value jsonrpc;
    jsonrpc.SetString("2.0", request.GetAllocator());
    request.AddMember("jsonrpc", jsonrpc, request.GetAllocator());
    Value method;
    method.SetString("Arithmetic.Div", request.GetAllocator());
    request.AddMember("method", method, request.GetAllocator());

    Value params(rapidjson::kObjectType);

    params.AddMember("lhs", lhs, request.GetAllocator());

    params.AddMember("rhs", rhs, request.GetAllocator());

    request.AddMember("params", params, request.GetAllocator());

    assert(conn_ != nullptr);
    client_.sendCall(conn_, request, cb);
  }

 private:
  TcpConnectionPtr conn_;
  ConnectionCallback cb_;
  BaseClient client_;
};

}  // namespace tinyrpc
#endif  // TINYRPC_ARITHMETICCLIENTSTUB_H_
